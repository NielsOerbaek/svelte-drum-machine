{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/DrumMachine.svelte",
    "../src/DrumField.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport DrumMachine from \"./DrumMachine.svelte\"\n\tlet width = 4;\n\tlet height = 4;\n\tlet bpm = 120;\n\tlet useBothDirections = false\n</script>\n\n<style>\n\t.main {\n\t\tmax-width: 1000px;\n\t\tmargin: 0 auto;\n\t}\n\th1 {\n\t\tcolor: purple;\n\t}\n\t#main {\n\t\tmargin-left: 400px;\n\t}\n\t#left-sidebar {\n\t\tposition: fixed;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 400px;\n\t\tpadding: 25px;\n\t}\n</style>\n\n<div id=\"main\">\n\t<div class=\"main\">\n\t\t<DrumMachine\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t\tbpm={bpm}\n\t\t\tuseBothDirections={useBothDirections}\n\t\t/>\n\t</div>\n</div>\n<div id=\"left-sidebar\" class=\"teal lighten-5\">\n\t<h1>Svelte <br/>Drum <br/>Machine!</h1>\n\t\t<div class=\"settings\">\n\t\t\t<h5>Settings:<h5>\n\t\t\t<label for=\"setting-height\">Height:</label>\n\t\t\t<input type=\"number\" bind:value={height} id=\"setting-height\"/>\n\t\t\t<label for=\"setting-width\">Width:</label>\n\t\t\t<input type=\"number\" bind:value={width} id=\"setting-width\"/>\n\t\t\t<label for=\"setting-bpm\">BPM:</label>\n\t\t\t<input type=\"number\" bind:value={bpm} id=\"setting-bpm\"/>\n\t\t\t<div class=\"direction-selector\">\n\t\t\t\t<div class=\"switch\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\tDirections:<br/>\n\t\t\t\t\t\tOne\n\t\t\t\t\t\t<input type=\"checkbox\" bind:checked={useBothDirections}>\n\t\t\t\t\t\t<span class=\"lever\"></span>\n\t\t\t\t\t\tTwo\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n",
    "<script>\n  import DrumField from './DrumField.svelte'\n  import {Howl, Howler} from 'howler';\n\n  const sounds = {\n    kick: new Howl({\n      src: \"/audio/kick.mp3\",\n      sprite: {\n        cropped: [50, 300]\n      }\n    }),\n    clap: new Howl({\n      src: \"/audio/clap.mp3\",\n      sprite: {\n        cropped: [50, 300]\n      },\n      volume: 0.8\n    }),\n    liv: new Howl({\n      src: \"/audio/liv.mp3\",\n      sprite: {\n        cropped: [250, 300]\n      }\n    }),\n    bongo: new Howl({\n      src: \"/audio/bongo.mp3\",\n      sprite: {\n        cropped: [250, 300]\n      }\n    })\n  };\n\n  export let height;\n  export let width;\n  export let bpm;\n  export let useBothDirections = true\n\n  $: console.log(\"h,w,bpm:\", height, width, bpm)\n  $: console.log(\"useBothDirections:\", useBothDirections)\n\n  $: beatgrid = new Array(height).fill(false).map(() => new Array(width).fill(null).map(() => {\n    let o = {};\n    for(let sound in sounds){\n      o[sound] = false;\n    }\n    return o;\n  }))\n  $: highlightgrid = new Array(height).fill(null).map(() => new Array(width).fill(null))\n  let currentStep = 0\n  let looper\n\n  $: {clearInterval(looper);\n      looper = setInterval(() => {\n        let way1 = getQuotientAndRemainderOfStep(currentStep,width)\n        let way2 = getQuotientAndRemainderOfStep(currentStep,height)\n        for(let sound in sounds) {\n          if(beatgrid[way1.q][way1.r][sound] || (useBothDirections && beatgrid[way2.r][way2.q][sound])) {\n            sounds[sound].play(\"cropped\")\n          }\n        }\n        // Reset all highlights and set the new ones\n        highlightgrid.forEach((r) => r.forEach((val, index) => { if(val) { r[index] = false; } }))\n        highlightgrid[way1.q][way1.r] = true;\n        if(useBothDirections) highlightgrid[way2.r][way2.q] = true;\n        currentStep = (currentStep + 1) % (height * width);\n      }, 30000/bpm)\n    }\n\n  function toggleField(i,j,event){\n    let key = event.detail.sound\n    beatgrid[i][j][key] = !beatgrid[i][j][key];\n  }\n  function gridToString(mat){\n    return mat.map((r) => r.map((v) => v ? \"X\" : \"O\")).join(\"\\n\")\n  }\n  function getQuotientAndRemainderOfStep(step,ax){\n    let quotient = Math.floor(step/ax);\n    let remainder = step % ax\n    return {q :quotient, r: remainder}\n }\n</script>\n\n<style>\n  .drum-machine {\n    position: relative;\n    display: grid;\n    grid-template-rows: auto;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"drum-machine\" style={\"grid-template-columns: \" + (\"1fr \".repeat(width))}>\n  {#each beatgrid as row,i}\n    {#each row as value,j}\n      <DrumField\n        state={value}\n        sounds={Object.keys(sounds)}\n        height={height}\n        highlight={highlightgrid[i][j]}\n        on:click={(event) => toggleField(i,j,event)}\n        />\n    {/each}\n  {/each}\n</div>\n",
    "<script>\n  import {createEventDispatcher} from 'svelte';\n  const dispatch = createEventDispatcher();\n\n  export let state;\n  export let sounds;\n  export let highlight;\n  export let height;\n\n  $: console.debug(\"State:\", state)\n</script>\n\n\n<style>\n  .drum-field {\n    border: 1px solid black;\n    border-radius: 10px;\n    box-shadow: 5px 5px 0 2px rgba(150,150,150,0.8);\n    display: grid;\n    grid-template-columns: 1fr  1fr;\n    grid-template-rows: auto;\n    place-items: center;\n    background: white;\n    transition: all 100ms linear;\n  }\n  .drum-field.highlight-true {\n    background: yellowgreen;\n  }\n\n  .sound-button {\n    width:100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  h6 {\n    text-transform: capitalize;\n  }\n\n  .on-label {\n    width: 80%;\n    height: 50%;\n    background: black;\n    box-shadow: 5px 5px 0 0 #555;\n    transform: none;\n    transition: 300ms all ease;\n  }\n  .on-label:active {\n    box-shadow: 0px 0px 0 0 #555;\n    transform: translate(5px,5px);\n  }\n  .on-label.on-true {\n    background: orangered;\n  }\n</style>\n\n<div class={'drum-field highlight-' + highlight} style={\"height:\"+(95/height)+\"vh\"}>\n  {#each sounds as sound }\n    <div class=\"sound-button\">\n      <h6>{sound}</h6>\n      <div\n        class={\"on-label on-\" + state[sound]}\n        on:click={() => dispatch(\"click\",{sound: sound})}\n      />\n    </div>\n  {/each}\n</div>\n"
  ],
  "names": [],
  "mappings": "AASC,KAAK,eAAC,CAAC,AACN,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AACD,EAAE,eAAC,CAAC,AACH,KAAK,CAAE,MAAM,AACd,CAAC,AACD,KAAK,eAAC,CAAC,AACN,WAAW,CAAE,KAAK,AACnB,CAAC,AACD,aAAa,eAAC,CAAC,AACd,QAAQ,CAAE,KAAK,CACf,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,AACd,CAAC;ACyDA,aAAa,eAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,IAAI,CACxB,QAAQ,CAAE,IAAI,AAChB,CAAC;AC1ED,WAAW,cAAC,CAAC,AACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAC/C,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,EAAE,GAAG,CAC/B,kBAAkB,CAAE,IAAI,CACxB,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,AAC9B,CAAC,AACD,WAAW,eAAe,cAAC,CAAC,AAC1B,UAAU,CAAE,WAAW,AACzB,CAAC,AAED,aAAa,cAAC,CAAC,AACb,MAAM,IAAI,CACV,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,cAAc,CAAE,UAAU,AAC5B,CAAC,AAED,SAAS,cAAC,CAAC,AACT,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAC5B,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,AAC5B,CAAC,AACD,uBAAS,OAAO,AAAC,CAAC,AAChB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAC5B,SAAS,CAAE,UAAU,GAAG,CAAC,GAAG,CAAC,AAC/B,CAAC,AACD,SAAS,QAAQ,cAAC,CAAC,AACjB,UAAU,CAAE,SAAS,AACvB,CAAC"
}